/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Vista;

/**
 *
 * @author lissette
 */
public class FRM_InformacionIntercambiar extends javax.swing.JFrame {

    /**
     * Creates new form FRM_InformacionIntercambiar
     */
    public FRM_InformacionIntercambiar() {
        initComponents();
        setLocation(750,250);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(610, 348));
        setMinimumSize(new java.awt.Dimension(610, 348));
        setPreferredSize(new java.awt.Dimension(610, 348));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea1.setBackground(new java.awt.Color(106, 208, 103));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Ubuntu Light", 1, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("El Ordenamiento de Burbuja (Bubble Sort en inglés) es un \nsencillo algoritmo de ordenamiento. \nFunciona revisando cada elemento de la lista que va a ser \nordenada con el siguiente, intercambiándolos de posición si \nestán en el orden equivocado. Es necesario revisar varias veces \ntoda la lista hasta que no se necesiten más intercambios, lo cual\n significa que la lista está ordenada. \nEste algoritmo obtiene su nombre de la forma con la que suben \npor la lista los elementos durante los intercambios, como si \nfueran pequeñas \"burbujas\". \nTambién es conocido como el método del intercambio directo. \nDado que solo usa comparaciones para operar elementos, se lo \nconsidera un algoritmo de comparación, siendo el más sencillo \nde implementar.");
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 570, 280));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/orig_64506.jpg"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(610, 348));
        jLabel1.setMinimumSize(new java.awt.Dimension(610, 348));
        jLabel1.setPreferredSize(new java.awt.Dimension(610, 348));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 630, 370));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
